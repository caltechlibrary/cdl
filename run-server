#!/usr/bin/env python3
# =============================================================================
# @file    run-server
# @brief   Simple server control program for DIBS experiment
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/dibs
# =============================================================================

# Initial imports. More things are imported later below.

import pkg_resources
import os
from   os.path import exists, dirname, join
import sys
from   sys import exit


# Sanity-check the run-time environment before attempting anything else.
# .............................................................................

here = dirname(sys.argv[0])

if not exists(join(here, 'requirements.txt')):
    print('‼️  Expected to be in same directory as requirements.txt')
    exit(1)
else:
    with open('requirements.txt', 'r') as req_file:
        try:
            pkg_resources.require(req_file)
        except pkg_resources.DistributionNotFound as ex:
            print('‼️  Not all Python dependencies have been installed.')
            print('‼️  Please run "pip3 install -r requirements.txt" or equivalent.')
            exit(1)

if not exists(join(here, 'settings.ini')):
    where = 'the current directory' if here == '.' else here
    print(f'‼️  File "settings.ini" not found in {where}.')
    exit(1)

if not exists(join(here, 'viewer', 'node_modules')):
    print(f'‼️  Node modules appear to be missing from "viewer" subdirectory.')
    exit(1)


# Define the main entry point.
# .............................................................................
# Import 3rd-party dependencies here, after the tests above for their existence
# in the user's environment.  Not importing them at the top of the file is
# arguably against Pythonic best practices, but IMHO testing for the packages
# first lets us give a more informative error if anything is missing.

from   boltons.debugutils import pdb_on_signal
from   commonpy.data_utils import timestamp
from   commonpy.string_utils import antiformat
from   decouple import config
import plac
from   shutil import which
import signal
from   subprocess import check_output
from   urllib.parse import urlparse

if __debug__:
    from sidetrack import set_debug, log, logr

from   dibs.server import Server

@plac.annotations(
    address   = ('host name or address to use for the web server',     'option', 'a'),
    port      = ('port number for the web server',                     'option', 'p'),
    no_reload = ("turn off Bottle's auto-reloader (default: turn on)", 'flag',   'R'),
    debug     = ('write detailed trace to "OUT" ("-" means console)',  'option', '@'),
)

def main(address = 'A', port = 'P', no_reload = False, debug = 'OUT'):
    '''Server control script for DIBS experimental server.

By default, this will read the file "settings.ini" for the value of the
variable BASE_URL, and start the server on the host and port indicated.
If given the option -a and/or -p on the command line, the given values will
override the value of BASE_URL in settings.ini.

Additional command-line arguments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If given the -@ argument, this program will output a detailed trace of
what it is doing. The debug trace will be sent to the given destination,
which can be '-' to indicate console output, or a file path to send the
output to a file.

When -@ has been given, Ottoman also installs a signal handler on signal
SIGUSR1 that will drop Ottoman into the pdb debugger if the signal is sent
to the running process.

Command-line arguments summary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''

    # Set up debug logging as soon as possible, if requested ------------------

    if debug != 'OUT':
        if __debug__: set_debug(True, debug, print_package = True)
        import faulthandler
        faulthandler.enable()
        if not sys.platform.startswith('win'):
            # Even with a different signal, I can't get this to work on Win.
            pdb_on_signal(signal.SIGUSR1)

    # Do the real work --------------------------------------------------------

    # See http://bottlepy.org/docs/dev/tutorial.html#auto-reloading for an
    # important note about Bottle: when it's running in auto-reload mode,
    # "the main process will not start a server, but spawn a new child
    # process using the same command line arguments used to start the main
    # process. All module-level code is executed at least twice".  We can test
    # if we're in the child process by looking for a variable set by Bottle.

    in_bottle_child = ('BOTTLE_CHILD' in os.environ)

    if __debug__ and not in_bottle_child:
        log('='*8 + f' started {timestamp()} ' + '='*8)

    if not in_bottle_child:
        if not which('redis-cli'):
            print("⚠️ Can't find redis-cli -- proceeding anyway")
        elif 'PONG' in check_output(['redis-cli', 'ping']).decode():
            if __debug__: log('redis appears to be running')
        else:
            print(f'‼️  redis does not appear to be running.')
            exit(1)

    try:
        base_url = config('BASE_URL')
        config_url = urlparse(base_url)
        server_host = config_url.hostname if address == 'A' else address
        server_port = config_url.port if port == 'P' else port
        if not in_bottle_child:
            if __debug__: log(f'starting server on {server_host}:{server_port}')
        server = Server(host   = server_host,
                        port   = server_port,
                        debug  = False if debug == 'OUT' else debug,
                        reload = not no_reload)
        server.run()
    except KeyboardInterrupt as ex:
        print('⚠️ Interrupted by user -- exiting')
    except Exception as ex:
        exception = sys.exc_info()
        msg = antiformat(exception[1])
        print(f'‼️  Encountered error {exception[0].__name__}: {msg}')
        if __debug__:
            from traceback import format_exception
            details = ''.join(format_exception(*exception))
            logr(f'Exception: {msg}\n{details}')

    if __debug__ and not in_bottle_child:
        log('_'*8 + f' stopped {timestamp()} ' + '_'*8)


# Main invocation.
# .............................................................................

plac.call(main)

#!/usr/bin/env python3
# =============================================================================
# @file    run-server
# @brief   Simple server control program for DIBS experiment
# @author  Michael Hucka <mhucka@caltech.edu>
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/dibs
# =============================================================================

# Initial imports. More things are imported later below.

from   decouple import config
import pkg_resources
import os
from   os import path
import sys
from   sys import exit


# Sanity-check the run-time environment before attempting anything else.
# .............................................................................

here = path.dirname(sys.argv[0])

if not path.exists(path.join(here, 'requirements.txt')):
    print('‼️  Expected to be in same directory as requirements.txt')
    exit(1)
else:
    with open('requirements.txt', 'r') as req_file:
        try:
            pkg_resources.require(req_file)
        except pkg_resources.DistributionNotFound as ex:
            print('‼️  Not all Python dependencies have been installed.')
            print('‼️  Please run "pip3 install -r requirements.txt" or equivalent.')
            exit(1)

if not path.exists(path.join(here, 'settings.ini')):
    print('‼️  settings.ini file not found in {here}')
    exit(1)


# Define the main entry point.
# .............................................................................
# Import 3rd-party dependencies here, after the tests above for their existence
# in the user's environment.  Not importing them at the top of the file is
# arguably against Pythonic best practices, but IMHO testing for the packages
# first lets us give a more informative error if anything is missing.

from   boltons.debugutils import pdb_on_signal
from   commonpy.data_utils import timestamp
from   commonpy.string_utils import antiformat
import plac
import signal
if __debug__:
    from sidetrack import set_debug, log, logr

from   dibs.server import Server


@plac.annotations(
    address   = ('host name or address to use for the web server',     'option', 'a'),
    port      = ('port number for the web server',                     'option', 'p'),
    no_reload = ("turn off Bottle's auto-reloader (default: turn on)", 'flag',   'R'),
    debug     = ('write detailed trace to "OUT" ("-" means console)',  'option', '@'),
)

def main(address = 'A', port = 'P', no_reload = False, debug = 'OUT'):
    '''Server control script for DIBS experimental server.'''

    # Set up debug logging as soon as possible, if requested ------------------

    if debug != 'OUT':
        if __debug__: set_debug(True, debug, extra = '%(threadName)s')
        import faulthandler
        faulthandler.enable()
        if not sys.platform.startswith('win'):
            # Even with a different signal, I can't get this to work on Win.
            pdb_on_signal(signal.SIGUSR1)

    # Do the real work --------------------------------------------------------

    # See http://bottlepy.org/docs/dev/tutorial.html#auto-reloading for an
    # important note about Bottle: when it's running in auto-reload mode,
    # "the main process will not start a server, but spawn a new child
    # process using the same command line arguments used to start the main
    # process. All module-level code is executed at least twice".  We can test
    # if we're in the child process by looking for a variable set by Bottle.

    if __debug__ and not ('BOTTLE_CHILD' in os.environ):
        log('='*8 + f' started {timestamp()} ' + '='*8)

    try:
        server = Server(host   = config('DIBS_HOST') if address == 'A' else address,
                        port   = config('DIBS_PORT') if port == 'P' else port,
                        debug  = False if debug == 'OUT' else debug,
                        reload = not no_reload)
        server.run()
    except KeyboardInterrupt as ex:
        print('⚠️ Interrupted by user -- exiting')
    except Exception as ex:
        exception = sys.exc_info()
        msg = antiformat(exception[1])
        print(f'‼️  Encountered error {exception[0].__name__}: {msg}')
        if __debug__:
            from traceback import format_exception
            details = ''.join(format_exception(*exception))
            logr(f'Exception: {msg}\n{details}')

    if __debug__ and not ('BOTTLE_CHILD' in os.environ):
        log('_'*8 + f' stopped {timestamp()} ' + '_'*8)


# Main invocation.
# .............................................................................

plac.call(main)
